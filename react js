


1. Create React App:
Run the following commands in your terminal:

npx create-react-app task-tracker
cd task-tracker
npm start


2. Install Dependencies (if needed):
For styling with Bootstrap or Tailwind, install the respective framework:

Bootstrap:

npm install bootstrap

Import it in index.js:

import 'bootstrap/dist/css/bootstrap.min.css';

Tailwind: Follow the Tailwind installation guide.





---

2. App Structure

Create the following folder and file structure:

src/
├── components/
│   ├── TaskForm.jsx
│   ├── TaskList.jsx
│   ├── TaskItem.jsx
│   └── EditTaskModal.jsx
├── App.jsx
├── index.js
└── styles.css


---

3. Core Features

a. Add Task (TaskForm.jsx)

A form to capture task details (Title, Description, Due Date, and Status).

import React, { useState } from 'react';

const TaskForm = ({ addTask }) => {
  const [task, setTask] = useState({
    title: '',
    description: '',
    dueDate: '',
    status: 'Pending',
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setTask({ ...task, [name]: value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    addTask(task);
    setTask({ title: '', description: '', dueDate: '', status: 'Pending' });
  };

  return (
    <form onSubmit={handleSubmit} className="task-form">
      <input
        type="text"
        name="title"
        placeholder="Title"
        value={task.title}
        onChange={handleChange}
        required
      />
      <textarea
        name="description"
        placeholder="Description"
        value={task.description}
        onChange={handleChange}
        required
      />
      <input
        type="date"
        name="dueDate"
        value={task.dueDate}
        onChange={handleChange}
        required
      />
      <select name="status" value={task.status} onChange={handleChange}>
        <option value="Pending">Pending</option>
        <option value="In Progress">In Progress</option>
        <option value="Completed">Completed</option>
      </select>
      <button type="submit">Add Task</button>
    </form>
  );
};

export default TaskForm;


---

b. View Tasks (TaskList.jsx and TaskItem.jsx)

Display tasks as a list or table.

TaskList.jsx:

import React from 'react';
import TaskItem from './TaskItem';

const TaskList = ({ tasks, editTask, deleteTask }) => {
  return (
    <div className="task-list">
      {tasks.map((task, index) => (
        <TaskItem
          key={index}
          task={task}
          editTask={() => editTask(index)}
          deleteTask={() => deleteTask(index)}
        />
      ))}
    </div>
  );
};

export default TaskList;

TaskItem.jsx:

import React from 'react';

const TaskItem = ({ task, editTask, deleteTask }) => {
  return (
    <div className="task-item">
      <h3>{task.title}</h3>
      <p>{task.description}</p>
      <p>Due Date: {task.dueDate}</p>
      <p>Status: {task.status}</p>
      <button onClick={editTask}>Edit</button>
      <button onClick={deleteTask}>Delete</button>
    </div>
  );
};

export default TaskItem;


---

c. Edit Task (EditTaskModal.jsx)

Provide an interface for inline or modal-based editing.

import React, { useState } from 'react';

const EditTaskModal = ({ task, updateTask, closeModal }) => {
  const [updatedTask, setUpdatedTask] = useState(task);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setUpdatedTask({ ...updatedTask, [name]: value });
  };

  const handleSave = () => {
    updateTask(updatedTask);
    closeModal();
  };

  return (
    <div className="modal">
      <input
        type="text"
        name="title"
        value={updatedTask.title}
        onChange={handleChange}
      />
      <textarea
        name="description"
        value={updatedTask.description}
        onChange={handleChange}
      />
      <input
        type="date"
        name="dueDate"
        value={updatedTask.dueDate}
        onChange={handleChange}
      />
      <select name="status" value={updatedTask.status} onChange={handleChange}>
        <option value="Pending">Pending</option>
        <option value="In Progress">In Progress</option>
        <option value="Completed">Completed</option>
      </select>
      <button onClick={handleSave}>Save</button>
      <button onClick={closeModal}>Cancel</button>
    </div>
  );
};

export default EditTaskModal;


---

d. Delete Task

Add a delete button with a confirmation popup.

const handleDelete = (index) => {
  if (window.confirm('Are you sure you want to delete this task?')) {
    setTasks(tasks.filter((_, i) => i !== index));
  }
};


---

4. State Management in App.jsx

Handle task state and integrate all components.

import React, { useState, useEffect } from 'react';
import TaskForm from './components/TaskForm';
import TaskList from './components/TaskList';
import EditTaskModal from './components/EditTaskModal';

const App = () => {
  const [tasks, setTasks] = useState(
    JSON.parse(localStorage.getItem('tasks')) || []
  );
  const [editIndex, setEditIndex] = useState(null);

  useEffect(() => {
    localStorage.setItem('tasks', JSON.stringify(tasks));
  }, [tasks]);

  const addTask = (task) => {
    setTasks([...tasks, task]);
  };

  const editTask = (index) => {
    setEditIndex(index);
  };

  const updateTask = (updatedTask) => {
    const updatedTasks = [...tasks];
    updatedTasks[editIndex] = updatedTask;
    setTasks(updatedTasks);
    setEditIndex(null);
  };

  const deleteTask = (index) => {
    setTasks(tasks.filter((_, i) => i !== index));
  };

  return (
    <div className="app">
      <TaskForm addTask={addTask} />
      <TaskList tasks={tasks} editTask={editTask} deleteTask={deleteTask} />
      {editIndex !== null && (
        <EditTaskModal
          task={tasks[editIndex]}
          updateTask={updateTask}
          closeModal={() => setEditIndex(null)}
        />
      )}
    </div>
  );
};

export default App;


---

5. Styling (styles.css)

Add responsive styles to make the app user-friendly.

body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}
.task-form, .task-item {
  margin: 20px;
  padding: 10px;
  border: 1px solid #ccc;
}
.task-list {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
}
.modal {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: white;
  padding: 20px;
  border: 1px solid #ccc;
}



*server.js*:
javascript
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const cors = require('cors');

const app = express();
const port = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(bodyParser.json());

// MongoDB connection
mongoose.connect('mongodb://localhost:27017/notes', { useNewUrlParser: true, useUnifiedTopology: true });

// Note Schema
const noteSchema = new mongoose.Schema({
  title: { type: String, required: true },
  description: { type: String, required: true },
  category: { type: String, default: "Others" },
  created_at: { type: Date, default: Date.now },
  updated_at: { type: Date, default: Date.now }
});

const Note = mongoose.model('Note', noteSchema);

// CRUD APIs
app.post('/notes', async (req, res) => {
  const note = new Note(req.body);
  try {
    await note.save();
    res.status(201).send(note);
  } catch (error) {
    res.status(400).send(error);
  }
});

app.get('/notes', async (req, res) => {
  try {
    const notes = await Note.find(req.query).sort({ created_at: -1 });
    res.status(200).send(notes);
  } catch (error) {
    res.status(500).send(error);
  }
});

app.put('/notes/:id', async (req, res) => {
  try {
    const note = await Note.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true });
    if (!note) {
      return res.status(404).send({ error: 'Note not found' });
    }
    res.send(note);
  } catch (error) {
    res.status(400).send(error);
  }
});

app.delete('/notes/:id', async (req, res) => {
  try {
    const note = await Note.findByIdAndDelete(req.params.id);
    if (!note) {
      return res.status(404).send({ error: 'Note not found' });
    }
    res.send(note);
  } catch (error) {
    res.status(500).send(error);
  }
});

app.listen(port, () => {
  console.log(`Server running on port ${port}`);
});


### 2. Frontend (React)
*Setup*:
bash
npx create-react-app notes-manager
cd notes-manager
npm install axios


*App.js*:
javascript
import React from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import HomePage from './components/HomePage';
import NoteForm from './components/NoteForm';
import './App.css';

function App() {
  return (
    <Router>
      <div className="App">
        <Switch>
          <Route path="/" exact component={HomePage} />
          <Route path="/add" component={NoteForm} />
          <Route path="/edit/:id" component={NoteForm} />
        </Switch>
      </div>
    </Router>
  );
}

export default App;


*HomePage.js*:
javascript
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Link } from 'react-router-dom';

function HomePage() {
  const [notes, setNotes] = useState([]);
  const [search, setSearch] = useState('');
  const [category, setCategory] = useState('');

  useEffect(() => {
    fetchNotes();
  }, []);

  const fetchNotes = async () => {
    const response = await axios.get('http://localhost:5000/notes');
    setNotes(response.data);
  };

  const filteredNotes = notes.filter(note => 
    note.title.toLowerCase().includes(search.toLowerCase()) &&
    (category ? note.category === category : true)
  );

  return (
    <div>
      <h1>Notes</h1>
      <input
        type="text"
        placeholder="Search by title..."
        value={search}
        onChange={(e) => setSearch(e.target.value)}
      />
      <select onChange={(e) => setCategory(e.target.value)}>
        <option value="">All</option>
        <option value="Work">Work</option>
        <option value="Personal">Personal</option>
        <option value="Others">Others</option>
      </select>
      <ul>
        {filteredNotes.map(note => (
          <li key={note._id}>
            <h2>{note.title}</h2>
            <p>{note.description}</p>
            <p>{note.category}</p>
            <Link to={`/edit/${note._id}`}>Edit</Link>
            <button onClick={() => deleteNote(note._id)}>Delete</button>
          </li>
        ))}
      </ul>
      <Link to="/add">Add Note</Link>
    </div>
  );

  async function deleteNote(id) {
    await axios.delete(`http://localhost:5000/notes/${id}`);
    fetchNotes();
  }
}

export default HomePage;


*NoteForm.js*:
javascript
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useHistory, useParams } from 'react-router-dom';

function NoteForm() {
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [category, setCategory] = useState('Others');
  const history = useHistory();
  const { id } = useParams();

  useEffect(() => {
    if (id) {
      fetchNote();
    }
  }, [id]);

  const fetchNote = async () => {
    const response = await axios.get(`http://localhost:5000/notes/${id}`);
    const { title, description, category } = response.data;
    setTitle(title);
    setDescription(description);
    setCategory(category);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const note = { title, description, category };
    if (id) {
      await axios.put(`http://localhost:5000/notes/${id}`, note);
    } else {
      await axios.post('http://localhost:5000/notes', note);
    }
    history.push('/');
  };

  return (
    <form onSubmit={handleSubmit}>
      <h1>{id ? 'Edit Note' : 'Add Note'}</h1>
      <label>
        Title:
        <input type="text" value={title} onChange={(e) => setTitle(e.target.value)} required />
      </label>
      <label>
        Description:
        <textarea value={description} onChange={(e) => setDescription(e.target.value)} required></textarea>
      </label>
      <label>
        Category:
        <select value={category} onChange={(e) => setCategory(e.target.value)}>
          <option value="Work">Work</option>
          <option value="Personal">Personal</option>
          <option value="Others">Others</option>
        </select>
      </label>
      <button type="submit">Save</button>
    </form>
  );
}

export default NoteForm;

